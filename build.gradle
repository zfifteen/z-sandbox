plugins {
    id 'java'
    id 'application'
    id 'jacoco'  // Code coverage
    id 'com.diffplug.spotless' version '6.25.0'  // Code formatting
    id 'me.champeau.jmh' version '0.7.2'  // JMH for microbenchmarking
}

group = 'org.zfifteen'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    jmh 'org.openjdk.jmh:jmh-core:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    testImplementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.15.2'
}

application {
    mainClass = 'org.zfifteen.sandbox.Main'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jvmArgs "-Dfile.encoding=UTF-8"
    // run all tests by default; to include only a tag: ./gradlew test -Pgroups=bigdecimal
    if (project.hasProperty("groups")) {
        systemProperty "junit.jupiter.tags", project.property("groups")
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    description = 'Run long RSA integration experiments (opt-in)'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    systemProperty 'integration', 'true'
    useJUnitPlatform {
        includeTags 'integration'
    }
    // increase heap/timeouts for long runs
    jvmArgs '-Xmx8g', '-XX:+UseG1GC'
}

tasks.register('ladder') {
    doLast {
        // run rungs 200..260, log CSV
        exec {
            workingDir projectDir
            commandLine 'java', '-cp', sourceSets.main.runtimeClasspath.asPath, 'tools.BenchLadder', '--ladder', '--builder', 'ResidueFilter'
        }
    }
}

tasks.register('rsa260') {
    doLast {
        // run best builder on RSA-260 with checkpointing
        exec {
            workingDir projectDir
            commandLine 'java', '-cp', sourceSets.main.runtimeClasspath.asPath, 'tools.BenchLadder', '--rsa260'
        }
    }
}
