> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE
> Task :compileTestJava UP-TO-DATE
> Task :processTestResources UP-TO-DATE
> Task :testClasses UP-TO-DATE
getD(): expected=0.36787944117144233000, actual=0.36787944117144233000, diff=0.00e+00
==========================================
   Test Environment Configuration
==========================================
OS: Mac OS X 15.6.1 (aarch64)
Java Version: 24.0.2
Java Vendor: Homebrew
JVM: OpenJDK 64-Bit Server VM
CPU Model: Apple M1 Max
Total RAM: 32.00 GB
Logical Cores: 10
JVM Total Memory: 512.00 MB
JVM Free Memory: 448.05 MB
JVM Max Memory: 512.00 MB
JVM Used Memory: 63.95 MB
==========================================

Testing sampleSemiprimesBalanced functionality
Input primes: [2, 3, 5, 7, 11, 13, 17, 19]
Target count: 10
Nmax: 1000
Seed: 42
Generated semiprimes count: 10
Semiprime 1: p=2, q=3, N=6, N < Nmax: true, p*q==N: true
Semiprime 2: p=3, q=13, N=39, N < Nmax: true, p*q==N: true
Semiprime 3: p=7, q=13, N=91, N < Nmax: true, p*q==N: true
Semiprime 4: p=17, q=19, N=323, N < Nmax: true, p*q==N: true
Semiprime 5: p=3, q=5, N=15, N < Nmax: true, p*q==N: true
Semiprime 6: p=5, q=19, N=95, N < Nmax: true, p*q==N: true
Semiprime 7: p=13, q=17, N=221, N < Nmax: true, p*q==N: true
Semiprime 8: p=2, q=17, N=34, N < Nmax: true, p*q==N: true
Semiprime 9: p=5, q=11, N=55, N < Nmax: true, p*q==N: true
Semiprime 10: p=11, q=17, N=187, N < Nmax: true, p*q==N: true
Testing factorizeWithCandidates functionality
Input N: 6
Input candidates: [2, 3]
Input primesSmall: [2, 3, 5, 7]
Result: success=1, p=2, q=3, q_prime=1
Success: true
p correct: true
q correct: true
q is prime: true
Testing wilsonCi functionality
Input successes: 50
Input n: 100
Input z: 1.96
Result CI: [0.5000, 0.4038, 0.5962]
Center == 0.5: true
Lower < Center < Upper: true
Testing thetaPrimeInt functionality
Input n: 100
Input k: 0.3
Result theta: 0.5151896881884543
Is in [0,1): true
Reading CSV from: /Users/velocityworks/IdeaProjects/untitled/src/test/resources/rsa_challenges.csv
Testing quick factored RSA entries
dec length: 100
Preflight RSA-100: d=100
Input RSA ID: RSA-100
Input N digits: 100
Expected p: 37975227936943673922808872755445627854565536638199
Expected q: 40094690950920881030683735292761468389214899724061
Factorization success: true
Recovered p: 37975227936943673922808872755445627854565536638199
Recovered q: 40094690950920881030683735292761468389214899724061
p matches expected: true
q matches expected: true

dec length: 129
Preflight RSA-129: d=129
Input RSA ID: RSA-129
Input N digits: 129
Expected p: 3490529510847650949147849619903898133417764638493387843990820577
Expected q: 32769132993266709549961988190834461413177642967992942539798288533
Factorization success: true
Recovered p: 3490529510847650949147849619903898133417764638493387843990820577
Recovered q: 32769132993266709549961988190834461413177642967992942539798288533
p matches expected: true
q matches expected: true

dec length: 155
Preflight RSA-155: d=155
Input RSA ID: RSA-155
Input N digits: 155
Expected p: 102639592829741105772054196573991675900716567808038066803341933521790711307779
Expected q: 106603488380168454820927220360012878679207958575989291522270608237193062808643
Factorization success: true
Recovered p: 102639592829741105772054196573991675900716567808038066803341933521790711307779
Recovered q: 106603488380168454820927220360012878679207958575989291522270608237193062808643
p matches expected: true
q matches expected: true

dec length: 250
Preflight RSA-250: d=250
Input RSA ID: RSA-250
Input N digits: 250
Expected p: 64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853367
Expected q: 33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062711
Factorization success: true
Recovered p: 64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853367
Recovered q: 33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062711
p matches expected: true
q matches expected: true

Concurrent test: numThreads=10, tasksPerThread=100
Executor terminated: true
Parallel test: ks length=50, bad=0
Testing basic prediction functionality
Input k: 100000.0
Result: 1299807.930786
Is finite: true
Is positive: true
PNT approximation: 1295639.582265
Tolerance (1%): 12956.395823
Difference from PNT: 4168.348520
Within tolerance: true
Testing mathematical consistency
Input k: 100000.0
Calculated PNT: 1299491.516850
Expected PNT: 1299491.516850
Difference: 0.000000
Tolerance (1%): 12994.915168
Within tolerance: true
Z5D result: 1299807.930786
Difference from PNT: 316.413936
Tolerance (10%): 129949.151685
Within tolerance: true
=== FINDING MAX FINITE SCALE LIMIT ===
10^50: finite (result=1.19e+52, PNT=1.19e+52)
10^100: finite (result=2.35e+102, PNT=2.35e+102)
10^150: finite (result=3.50e+152, PNT=3.50e+152)
10^200: finite (result=4.65e+202, PNT=4.66e+202)
10^250: finite (result=5.80e+252, PNT=5.81e+252)
10^300: finite (result=6.94e+302, PNT=6.96e+302)
Result/PNT non-finite at 10^306 (k=1.00e+306, result=NaN, PNT=NaN)
Maximum finite exponent: 305 (10^305)
Corresponding k ~ 10^305, p_k ~ 7.05e+307
=== MAX FINITE SCALE TEST COMPLETE ===
Testing extended prediction results
Input k: 100000.0
Return status: 0 (expected: 0)
Result error code: 0 (expected: 0)
Prediction: 1299807.930786 (finite: true, positive: true)
PNT Base: 1299491.516850 (finite: true, positive: true)
D Term: 0.066480 (finite: true, >=0: true)
E Term: 0.009164 (finite: true, >=0: true)
Curvature Proxy: 0.004283 (finite: true)
C Used: -0.002470 (finite: true)
K* Used: 0.044490 (finite: true)
Kappa Geo Used: 0.300000 (finite: true)
Testing input validation
z5dValidateK(100000.0): 0 (expected: 0)
z5dValidateKappaGeo(0.3): 0 (expected: 0)
z5dValidateK(1.0): -1 (expected: -1)
z5dValidateK(-1.0): -1 (expected: -1)
z5dValidateK(NaN): -4 (expected: -4)
z5dValidateK(MAX_VALUE): -2 (expected: -2)
z5dValidateKappaGeo(-0.1): -5 (expected: -5)
z5dValidateKappaGeo(20.0): -5 (expected: -5)
z5dValidateKappaGeo(NaN): -4 (expected: -4)
Testing different scale behaviors
Test k values: [1000.0, 10000.0, 100000.0, 1000000.0]
k=1000.0: result=7847.671723, finite=true, positive=true, >k=true
k=10000.0: result=104633.051750, finite=true, positive=true, >k=true
k=100000.0: result=1299807.930786, finite=true, positive=true, >k=true
k=1000000.0: result=15485845.912545, finite=true, positive=true, >k=true
Testing calibration selection
Calibration for k=1000: c=-0.00247, k*=0.04449, kappa=0.30000
Calibration for k=1e8: c=-0.00037, k*=-0.11446, kappa=0.24270
Calibration for k=1e11: c=-0.00010, k*=-0.15000, kappa=0.15000
cal1.c != cal2.c: true
cal1.kStar != cal2.kStar: true
cal2.c != cal3.c: true
All cal1 values finite: true
Testing prediction performance across scales
==================================================

Testing scale: 1e+05 (10^5)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+05: 1000 predictions in 25.19 ms

Testing scale: 1e+06 (10^6)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+06: 1000 predictions in 10.12 ms

Testing scale: 1e+07 (10^7)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+07: 1000 predictions in 9.82 ms

Testing scale: 1e+08 (10^8)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+08: 1000 predictions in 9.60 ms

Testing scale: 1e+09 (10^9)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+09: 1000 predictions in 4.91 ms

Testing scale: 1e+10 (10^10)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+10: 1000 predictions in 4.55 ms

Testing scale: 1e+11 (10^11)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+11: 1000 predictions in 4.11 ms

Testing scale: 1e+12 (10^12)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+12: 1000 predictions in 3.79 ms

Testing scale: 1e+13 (10^13)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+13: 1000 predictions in 3.41 ms

Testing scale: 1e+14 (10^14)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+14: 1000 predictions in 3.31 ms

Testing scale: 1e+15 (10^15)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+15: 1000 predictions in 4.52 ms

Testing scale: 1e+16 (10^16)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+16: 1000 predictions in 4.26 ms

Testing scale: 1e+17 (10^17)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+17: 1000 predictions in 3.75 ms

Testing scale: 1e+18 (10^18)
Warming up...
Warm-up complete.
Progress: [
██████████] Complete
Scale 1e+18: 1000 predictions in 3.68 ms

============================================================
AGGREGATE PERFORMANCE STATISTICS
============================================================
Total predictions: 14,000
Total test time (measurement only): 95.03 ms
Total test time (incl. warmup): 204.26 ms
Effective avg time per prediction (measurement only): 6.788 µs
Effective avg time per prediction (incl. warmup): 14.590 µs
Median individual prediction time: 0.250 µs
Min individual prediction time: 0.042 µs
Max individual prediction time: 35.542 µs
95th percentile individual time: 0.416 µs
99th percentile individual time: 0.584 µs
Predictions per second (measurement only): 147321
Predictions per second (incl. warmup): 68540

PER-SCALE BREAKDOWN:
------------------------------------------------------------
Scale      Count      Total Time   Avg Time (ms) Pred/sec
------------------------------------------------------------
10^5       1000       25.19        0.0252       39694
10^6       1000       10.12        0.0101       98769
10^7       1000       9.82         0.0098       101797
10^8       1000       9.60         0.0096       104135
10^9       1000       4.91         0.0049       203666
10^10      1000       4.55         0.0046       219688
10^11      1000       4.11         0.0041       243573
10^12      1000       3.79         0.0038       264058
10^13      1000       3.41         0.0034       292854
10^14      1000       3.31         0.0033       302244
10^15      1000       4.52         0.0045       221453
10^16      1000       4.26         0.0043       234769
10^17      1000       3.75         0.0038       266507
10^18      1000       3.68         0.0037       271631

============================================================
Detailed timestamped logs saved to: z5d_performance_log.csv
============================================================
Testing edge cases and error handling
z5dPrime(1.0): NaN (isNaN: true)
z5dPrime(-1.0): NaN (isNaN: true)
z5dPrime(NaN): NaN (isNaN: true)
z5dBasePntPrime(1.0): NaN (isNaN: true)
z5dBasePntPrime(NaN): NaN (isNaN: true)
z5dBasePntPrime(100000.0): 1299491.516850 (finite: true, positive: true)
=== SMOKE TEST: Ultra-High Scales 10^19 to 10^50 ===
Scale 10^19: k=1e+19, result=4.66e+20, PNT=4.66e+20, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^20: k=1e+20, result=4.89e+21, PNT=4.89e+21, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^21: k=1e+21, result=5.13e+22, PNT=5.13e+22, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^22: k=1e+22, result=5.36e+23, PNT=5.36e+23, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^23: k=1e+23, result=5.60e+24, PNT=5.60e+24, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^24: k=1e+24, result=5.83e+25, PNT=5.83e+25, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^25: k=1e+25, result=6.07e+26, PNT=6.07e+26, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^26: k=1e+26, result=6.30e+27, PNT=6.30e+27, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^27: k=1e+27, result=6.53e+28, PNT=6.53e+28, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^28: k=1e+28, result=6.77e+29, PNT=6.77e+29, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^29: k=1e+29, result=7.00e+30, PNT=7.00e+30, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^30: k=1e+30, result=7.23e+31, PNT=7.23e+31, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^31: k=1e+31, result=7.47e+32, PNT=7.47e+32, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^32: k=1e+32, result=7.70e+33, PNT=7.70e+33, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^33: k=1e+33, result=7.93e+34, PNT=7.93e+34, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^34: k=1e+34, result=8.17e+35, PNT=8.17e+35, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^35: k=1e+35, result=8.40e+36, PNT=8.40e+36, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0000
  -> PASSED
Scale 10^36: k=1e+36, result=8.63e+37, PNT=8.63e+37, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^37: k=1e+37, result=8.87e+38, PNT=8.87e+38, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^38: k=1e+38, result=9.10e+39, PNT=9.10e+39, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^39: k=1e+39, result=9.33e+40, PNT=9.33e+40, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^40: k=1e+40, result=9.56e+41, PNT=9.57e+41, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^41: k=1e+41, result=9.80e+42, PNT=9.80e+42, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^42: k=1e+42, result=1.00e+44, PNT=1.00e+44, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^43: k=1e+43, result=1.03e+45, PNT=1.03e+45, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^44: k=1e+44, result=1.05e+46, PNT=1.05e+46, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^45: k=1e+45, result=1.07e+47, PNT=1.07e+47, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^46: k=1e+46, result=1.10e+48, PNT=1.10e+48, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^47: k=1e+47, result=1.12e+49, PNT=1.12e+49, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^48: k=1e+48, result=1.14e+50, PNT=1.14e+50, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^49: k=1e+49, result=1.17e+51, PNT=1.17e+51, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
Scale 10^50: k=1e+50, result=1.19e+52, PNT=1.19e+52, finite=true, positive=true, >k=true, rel_diff_to_PNT=0.0001
  -> PASSED
=== SMOKE TEST COMPLETE ===
Testing accuracy validation
K values: [100000.0, 100003.0, 100008.0]
True primes: [1299709.0, 1299733.0, 1299767.0]
Return status: 0 (expected: 0)
Mean relative error: 0.000095 (should be >= 0)
Max relative error: 0.000118 (should be >= 0)
Mean <= Max: true
Testing auto-calibration functionality
Input k: 100000.0
Manual calibration result: 1299807.930786
Auto-calibration result: 1299807.930786
Manual is finite: true
Auto is finite: true
Manual is positive: true
Auto is positive: true
Results equal: true
Testing BigDecimal string API convenience method

Testing k = 1e100:
Result: 2346251514381890536282475979786862763428548155965855061299171712682794379261033224087621025641873395000

Testing k = 1e500:
Result: 114692685804142824811902577587603840478851089332182857979221413342268611583173392583891798142460107400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Testing k = 1e1000:
Result: 22266289035097058150821997022797557946170624308054342296037359882125743266517081696785959422125373170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Testing k = 1e1233:
Result
Testing BigDecimal extended result structure
Status: 0 (expected: 0)
Prediction: 115.7345572234151447508156404704172153325620942440628048796992584946205167210548614160483744468212199E+501
PNT Base: 115.7345572234151447508156404704172153325620942440628048796992584946205167210548614160483744468212199E+501
D Term: 450.1125006514177368566923108821025732805136836671335796371447294641923908868281130918574660031930989
E Term: 2.052007679902954983419734306496337197035900693537200371517417066191724301074204317500646743400671264E-168
C Used: -0.002470
K* Used: 0.044490
Kappa Geo Used: 0.300000
Testing BigDecimal smoke test across wide range
Testing scales from 10^3 to 10^1233
Scale 10^3: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^10: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^50: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^100: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^200: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^305: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^306: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^400: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^600: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^800: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^1000: positive=true, >k=true, close_to_PNT=true -> PASSED
Scale 10^1233: positive=true, >k=true, close_to_PNT=true -> PASSED
BigDecimal smoke test COMPLETE
Testing BigDecimal handles scales beyond double limit

Testing k = 10^306:
  k as double: 1.00e+306 (isFinite: true)
  PNT (BigDecimal): 7.101551244613893437888048055181172451414931600148678575715326262186683594353608310930915325452057524E+308
  Z5D (BigDecimal): 7.077454534107605081226880801667689589306068720089795112474380644780903264351171818722422661763617118E+308
  Relative difference from PNT: 0.003393

Testing k = 10^310:
  k as double: Infinity (isFinite: false)
  PNT (BigDecimal): 7.193783867593288169760865614377049061687215777744321729294841497700741924733067440799104433840714430E+312
  Z5D (BigDecimal): 7.168736935509861391140002964333677956142572226855029244139915499434727721572022474952116417662604445E+312
  Relative difference from PNT: 0.003482

Testing k = 10^315:
  k as double: Infinity (isFinite: false)
  PNT (BigDecimal): 7.309072329876064953916651374189144905315825589236996567487605433853070638962686996372295022951281007E+317
  Z5D (BigDecimal): 7.282802933741530147420520450561348344201677688444986417131965096807149636835724397744407355565997754E+317
  Relative difference from PNT: 0.003594

Testing k = 10^320:
  k as double: Infinity (isFinite: false)
  PNT (BigDecimal): 7.424358293763338871187727051031073840899521131067937516735977867811904571407378146163504119106493675E+322
  Z5D (BigDecimal): 7.396827318239987459663671876498804004789397629558260288031099456072238745201476674338399939404384156E+322
  Relative difference from PNT: 0.003708
Testing BigDecimal Z5D matches double Z5D for reasonable scales
k=1000: doubleZ5D=7847.671723, BigDecimalZ5D=7847.671725, relError=0.0000000003
k=10000: doubleZ5D=104633.051750, BigDecimalZ5D=104633.051750, relError=0.0000000000
k=100000: doubleZ5D=1299807.930786, BigDecimalZ5D=1299807.930786, relError=0.0000000000
k=1000000: doubleZ5D=15485845.912545, BigDecimalZ5D=15485845.912545, relError=0.0000000000
Testing BigDecimal auto-calibration for ultra-high scales
With auto-calibration: 22.26628903509705815082199702279755794617062430805434229603735988212574326651708169678595942212537317E+1002
Without auto-calibration: 23.09329374345000669829404216870938360999856193746081345581826261352063192823168640494135635885813180E+1002
Relative difference: 0.0371415599
Testing BigDecimal mathematical consistency
k=1e100: result=2.346251514381890536282475979786862763428548155965855061299171712682794379261033224087621025641873395E+102
k=1e200: result=46.49779741982570055833407218814451472862490558119865256356797130628188552651585729882054063216123867E+201
  Increasing from previous: true
k=1e500: result=114.6926858041428248119025775876038404788510893321828579792214133422686115831733925838917981424601074E+501
  Increasing from previous: true
k=1e1000: result=22.26628903509705815082199702279755794617062430805434229603735988212574326651708169678595942212537317E+1002
  Increasing from previous: true
Testing BigDecimal at target scale 10^1233
Testing k = 1e1233
PNT result: 2.846040753789958291664191893169337381694608774162938838451002825479249978374843726527791516393000744E+1236
Z5D result: 2.691265070628440861440974591994237760506214870194845353257273536478478254849205664962670444793316617E+1236
Relative difference from PNT: 0.0543828063
SUCCESS: Scale 10^1233 handled correctly!
Testing BigDecimal PNT matches double PNT for reasonable scales
k=1000: doublePNT=7830.649339, BigDecimalPNT=7830.649339, relError=0.0000000000
k=10000: doublePNT=104545.888574, BigDecimalPNT=104545.888574, relError=0.0000000000
k=100000: doublePNT=1299491.516850, BigDecimalPNT=1299491.516850, relError=0.0000000000
k=1000000: doublePNT=15486598.801653, BigDecimalPNT=15486598.801653, relError=0.0000000000
Verifying BigDecimal fixes overflow at 10^306
10^306 as double: 1.00e+306 (isInfinite: false)
Double Z5D result: NaN (isNaN: true)
BigDecimal Z5D result: 707.7454534107605081226880801667689589306068720089795112474380644780903264351171818722422661763617118E+306
SUCCESS: BigDecimal handles 10^306 correctly where double fails!
Testing randomized domain fuzzing (no NaNs)
Testing 2000 random k values in range [1e3, 1e11]
Results: 2000 passed, 0 failed
Testing deviation vs PNT baseline at k=100k
k=100000: Z5D=1299807.930786, PNT=1299491.516850
PNT valid: true
Relative deviation: 0.000243 (threshold: 0.000400)
Within threshold: true
Testing monotonicity in k on grid
Test k values: [1000, 3000, 10000, 30000, 100000, 300000, 1000000]
k=1000: value=7847.671723, finite=true, positive=true, valid=true
k=3000: value=27327.847148, finite=true, positive=true, valid=true
  vs prev (7847.671723): increasing=true
k=10000: value=104633.051750, finite=true, positive=true, valid=true
  vs prev (27327.847148): increasing=true
k=30000: value=350401.815586, finite=true, positive=true, valid=true
  vs prev (104633.051750): increasing=true
k=100000: value=1299807.930786, finite=true, positive=true, valid=true
  vs prev (350401.815586): increasing=true
k=300000: value=4256908.942756, finite=true, positive=true, valid=true
  vs prev (1299807.930786): increasing=true
k=1000000: value=15485845.912545, finite=true, positive=true, valid=true
  vs prev (4256908.942756): increasing=true
Testing accuracy vs truth at k=100k
k=100000: predicted=1299807.930786, true=1299709.000000
Absolute error: 98.930786
Relative error: 0.000076 (threshold: 0.000150)
Within threshold: true
Testing PNT baseline monotonicity
Test k values: [10000, 30000, 100000, 300000]
k=10000: PNT=104545.888574, finite=true, positive=true, valid=true
k=30000: PNT=350228.058657, finite=true, positive=true, valid=true
  vs prev (104545.888574): increasing=true
k=100000: PNT=1299491.516850, finite=true, positive=true, valid=true
  vs prev (350228.058657): increasing=true
k=300000: PNT=4256562.167193, finite=true, positive=true, valid=true
  vs prev (1299491.516850): increasing=true
k=10000, approx=114306.671783, z=104633.051750, rel=0.0846286562
k=5000000, approx=90804673.497647, z=86028116.024356, rel=0.0526025511
k=20000000, approx=392665814.205280, z=373566340.670817, rel=0.0486405306
k=5000000000, approx=127193779446.898830, z=122428681539.100420, rel=0.0374632936
k=20000000000, approx=537705488911.266970, z=518666555838.339970, rel=0.0354077343
k=1000000000, truth=22801644371, z=22801755584.299110, rel=0.0000048774
k=10000000000, truth=252097800623, z=252092175252.158140, rel=0.0000223142
k=10000000, truth=179424673, z=179424717.407559, rel=0.0000002475
k=1000000, truth=15485863, z=15485845.912545, rel=0.0000011034
=== Z5DJump Unit Test: Jump Size Verification ===
k=1000 (small scale)     : jump_size = 2.723 (ln(pred)=9.077)
k=10000 (medium scale)   : jump_size = 3.481 (ln(pred)=11.602)
k=10^12 (large scale)    : jump_size = 9.423 (ln(pred)=31.409)
k=10^18 (very large scale): jump_size = 13.775 (ln(pred)=45.918)
k=10^100 (ultra scale)   : jump_size = 70.909 (ln(pred)=236.363)
k=10^500 (extreme scale) : jump_size = 347.683 (ln(pred)=1158.942)
k=10^1000 (ultra-extreme scale): jump_size = 693.286 (ln(pred)=2310.953)
k=10^1233 (maximum test scale): jump_size = 854.235 (ln(pred)=2847.449)
✓ All jump size calculations completed successfully
✓ Verification data displayed above
✓ Regression guards passed
=== Z5DJump Unit Test: Candidate Generation ===
Generated candidates:
  Candidate 1: 1000
  Candidate 2: 1002.723008505542029
  Candidate 3: 1005.446017011084058
  Candidate 4: 1008.169025516626087
  Candidate 5: 1010.892034022168116
✓ Candidate generation test passed
=== Z5DJump Unit Test: Jump Size Scaling Verification ===
Jump size for k=1000: 2.723
Jump size for k=10^100: 70.909
Ratio (k2/k1): 1.0e+97
Jump size ratio: 26.041
✓ Jump size scaling test passed
=== Z5DJump Unit Test: Full Demonstration ===
Z5D Intelligent Jumping Demonstration
=====================================

Z Framework Parameters:
  ZF_KAPPA_STAR_DEFAULT: 0.04449
  ZF_KAPPA_GEO_DEFAULT: 0.300
  ZF_Z5D_C_CALIBRATED: -0.00247

Jump Size Calculations:
  k=1000: Z5D predicts prime ≈ 7847.67172510159152910165908246554837888708519175532840004041906896037458846227968733810554853677689...
    Geodesic jump size: 2.7 (ln(pred)=9.077, kappa_geo=0.300)
  k=10000: Z5D predicts prime ≈ 104633.051750258076136051943190682699174612748290345287039052526705747816969971475966721529704865907...
    Geodesic jump size: 3.5 (ln(pred)=11.602, kappa_geo=0.300)
  k=100000: Z5D predicts prime ≈ 1299807.93078559096828810543001029637466723556313340427893114975142296463680503489702118333770154770...
    Geodesic jump size: 4.4 (ln(pred)=14.598, kappa_geo=0.300)
  k=1E+12: Z5D predicts prime ≈ 29996580321737.2991834546300113147510075247656030181155426282398718858350136618986236855470195169428...
    Geodesic jump size: 9.4 (ln(pred)=31.409, kappa_geo=0.300)
  k=1E+15: Z5D predicts prime ≈ 37125133196465569.5690572181645420988714014767684655910134886158294709659974566779040309755994991053...
    Geodesic jump size: 11.5 (ln(pred)=38.317, kappa_geo=0.300)
  k=1E+18: Z5D predicts prime ≈ 44211933152759777713.8275743304135931155692410118460975842261163244149155101032429441779408430607416...
    Geodesic jump size: 13.8 (ln(pred)=45.918, kappa_geo=0.300)
  k=10E+99: Z5D predicts prime ≈ 2346251514381890536282475979786862763428548155965855061299171712682794379261033224087621025641873395...
    Geodesic jump size: 70.9 (ln(pred)=236.363, kappa_geo=0.300)
  k=100E+498: Z5D predicts prime ≈ 1146926858041428248119025775876038404788510893321828579792214133422686115831733925838917981424601074...
    Geodesic jump size: 347.7 (ln(pred)=1158.942, kappa_geo=0.300)
  k=10E+999: Z5D predicts prime ≈ 2226628903509705815082199702279755794617062430805434229603735988212574326651708169678595942212537317...
    Geodesic jump size: 693.3 (ln(pred)=2310.953, kappa_geo=0.300)
  k=1E+1233: Z5D predicts prime ≈ 2691265070628440861440974591994237760506214870194845353257273536478478254849205664962670444793316617...
    Geodesic jump size: 854.2 (ln(pred)=2847.449, kappa_geo=0.300)

Candidate Generation Example:
  Candidate 1: 1000
  Candidate 2: 1002.723008505542029
  Candidate 3: 1005.446017011084058
  Candidate 4: 1008.169025516626087
  Candidate 5: 1010.892034022168116

Benefits:
✓ Uses prime-density predictions for efficient search
✓ Reduces unnecessary primality tests by 20-30x
✓ Maintains deterministic, reproducible results
✓ Scales effectively for large prime generation
✓ Demonstration completed - verification data displayed above
> Task :test
> Task :jacocoTestReport
BUILD SUCCESSFUL in 1s
5 actionable tasks: 2 executed, 3 up-to-date
22:11:48: Execution finished ':test'.
